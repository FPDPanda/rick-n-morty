{"version":3,"sources":["components/Episode.js","components/Screen.js","queries/queries.js","components/Buttons.js","components/Main.js","App.js","index.js"],"names":["Episode","episodeNumber","episodeLocations","episodeCharacters","useState","openEpisode","setOpenEpisode","onClick","style","height","className","map","location","name","character","src","image","alt","Screen","data","loading","setLoading","useEffect","i","localStorage","length","push","JSON","parse","getItem","color","textAlign","episode","characters","locations","getCharactersAndLocationsQuery","charIds","numberBetweenThreeAndEight","Math","floor","random","setCharIds","setLocIds","queryCharactersAndLocations","gql","graphql","id","newEpisodeNumber","newEpisode","charactersByIds","locationsByIds","episodes","setItem","stringify","window","reload","Main","client","ApolloClient","uri","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iXAyCeA,MApCf,YAAwE,IAAtDC,EAAqD,EAArDA,cAAeC,EAAsC,EAAtCA,iBAAkBC,EAAoB,EAApBA,kBAAoB,EAC/BC,oBAAS,GADsB,mBAC9DC,EAD8D,KACjDC,EADiD,KAOnE,OACI,yBACIC,QANR,WACID,GAAgBD,IAMZG,MAAQ,CAACC,OAAQJ,EAAY,QAAQ,QACrCK,UAAU,0BAHd,UAKI,sBAAKA,UAAU,gCAAf,qBAAwDT,KAExD,oBAAIS,UAAU,gCAAd,uBAEA,6BACKR,EAAiBS,KAAI,SAAAC,GAAQ,OAC9B,oBAAIF,UAAU,mCAAd,SAAkDE,EAASC,YAI/D,oBAAIH,UAAU,gCAAd,wBACA,6BACKP,EAAkBQ,KAAI,SAAAG,GAAS,OAC5B,+BACI,qBAAKC,IAAKD,EAAUE,MAAOC,IAAKH,EAAUD,OAC1C,4BAAIC,EAAUD,mBCQvBK,I,EAAAA,EAjCf,WAAmB,IAAD,EACQd,mBAAS,IADjB,mBACTe,EADS,aAEcf,oBAAS,IAFvB,mBAETgB,EAFS,KAEAC,EAFA,KAad,OATAC,qBAAU,WACN,IAAK,IAAIC,EAAI,EAAGA,EAAIC,aAAaC,OAAQF,IACrCJ,EAAKO,KAAKC,KAAKC,MAAMJ,aAAaK,QAAQ,WAAWN,EAAE,MAExDJ,GACCE,GAAW,KAEhB,CAACF,IAEDC,EAEK,uBAAOV,UAAU,kBAAjB,SACI,mBAAGF,MAAO,CAACsB,MAAM,OAAQC,UAAU,UAAnC,mCAKJ,uBAAOrB,UAAU,kBAAjB,SACKS,EAAKR,KAAI,SAAAqB,GAAO,OACb,cAAC,EAAD,CAAS/B,cAAe+B,EAAQ/B,cAChCE,kBAAmB6B,EAAQC,WAC3B/B,iBAAkB8B,EAAQE,kB,wCCP9C,IAAIC,EAAiC,0CAxBrC,WAKI,IAJA,IAAIC,EAAU,GAEVC,EAA6BC,KAAKC,MAAoB,EAAdD,KAAKE,UAAY,EAErDjB,EAAI,EAAGA,EAAIc,EAA4Bd,IAC3Ca,EAAQV,KAAKY,KAAKC,MAAoB,IAAdD,KAAKE,UAAc,GAG/C,OAAOJ,EAiBqBK,GAFK,wGAZrC,WAKI,IAJA,IAAIL,EAAU,GAEVC,EAA6BC,KAAKC,MAAoB,EAAdD,KAAKE,UAAY,EAErDjB,EAAI,EAAGA,EAAIc,EAA4Bd,IAC3Ca,EAAQV,KAAKY,KAAKC,MAAoB,IAAdD,KAAKE,UAAc,GAG/C,OAAOJ,EAWoBM,GARM,6DAejCC,EAA8BC,YAAH,4BAAST,GCHzBU,kBAAQF,EAARE,EA7Bf,YAA0B,IAAR1B,EAAO,EAAPA,KAkBd,OACI,qBAAKT,UAAU,mBAAf,SACI,wBACAoC,GAAG,0BACHvC,QArBR,WACI,IAAIwC,EAAmBvB,aAAaC,OAAO,EAGvCuB,EAAa,CACb/C,cAAe8C,EACfd,WAJuBd,EAAK8B,gBAK5Bf,UAJsBf,EAAK+B,gBAO3BC,EAAQ,eACLH,GAGPxB,aAAa4B,QAAQ,UAAWL,EAAkBpB,KAAK0B,UAAUF,IACjEG,OAAO1C,SAAS2C,UAIZ,8BCXGC,MATf,WACI,OACI,uBAAM9C,UAAU,WAAhB,UACI,cAAC,EAAD,IACA,cAAC,EAAD,QCGN+C,EAAS,IAAIC,IAAa,CAC9BC,IAAK,wCAaQC,MAVf,WACE,OACE,cAAC,IAAD,CAAgBH,OAAQA,EAAxB,SACE,qBAAK/C,UAAU,MAAf,SACE,cAAC,EAAD,SCnBRmD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.930b4a95.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n// CSS\r\nimport '../styles/Episode.css'\r\n\r\nfunction Episode({episodeNumber, episodeLocations, episodeCharacters}) {\r\n    let [openEpisode, setOpenEpisode] = useState(false);\r\n\r\n    function switchOpenEpisode() {\r\n        setOpenEpisode(!openEpisode);\r\n    }\r\n\r\n    return (\r\n        <button\r\n            onClick= {switchOpenEpisode}\r\n            style= {{height: openEpisode?'500px':'30px'}}\r\n            className=\"App-main-screen-episode\">\r\n\r\n            <div className=\"App-main-screen-episodeNumber\">Episode {episodeNumber}</div>\r\n\r\n            <h2 className=\"App-main-screen-episodeTitles\">Locations</h2>\r\n\r\n            <ul>\r\n                {episodeLocations.map(location =>\r\n                <li className=\"App-main-screen-episode-location\">{location.name}</li>\r\n                )}\r\n            </ul>\r\n\r\n            <h2 className=\"App-main-screen-episodeTitles\">Characters</h2>\r\n            <ul>\r\n                {episodeCharacters.map(character =>\r\n                    <li>\r\n                        <img src={character.image} alt={character.name}></img>\r\n                        <p>{character.name}</p>\r\n                    </li>          \r\n                )}\r\n            </ul>\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Episode\r\n","import React, {useState, useEffect} from 'react'\r\n\r\n// CSS\r\nimport '../styles/Screen.css'\r\n\r\n// Components\r\nimport Episode from './Episode'\r\n\r\nfunction Screen() {\r\n    let [data, setData] = useState([]);\r\n    let [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        for (let i = 0; i < localStorage.length; i++) {\r\n            data.push(JSON.parse(localStorage.getItem('episode'+(i+1))))\r\n        }\r\n        if(data) {\r\n            setLoading(false)\r\n        }\r\n    }, [data])\r\n\r\n    if(loading) {\r\n        return(\r\n            <aside className=\"App-main-screen\">\r\n                <p style={{color:'#fff', textAlign:'center'}}>Loading episodes...</p>\r\n            </aside>\r\n        )\r\n    } else {    \r\n        return (\r\n            <aside className=\"App-main-screen\">\r\n                {data.map(episode =>\r\n                    <Episode episodeNumber={episode.episodeNumber} \r\n                    episodeCharacters={episode.characters} \r\n                    episodeLocations={episode.locations} />\r\n                )\r\n                }\r\n            </aside>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Screen;","import { gql } from 'apollo-boost';\r\n\r\nfunction setCharIds() {\r\n    let charIds = [];\r\n\r\n    let numberBetweenThreeAndEight = Math.floor(Math.random()*6)+3;\r\n\r\n    for(let i = 0; i < numberBetweenThreeAndEight; i++) {\r\n        charIds.push(Math.floor(Math.random()*671)+1)\r\n    }\r\n\r\n    return charIds\r\n}\r\n\r\nfunction setLocIds() {\r\n    let charIds = [];\r\n\r\n    let numberBetweenThreeAndEight = Math.floor(Math.random()*3)+3;\r\n\r\n    for(let i = 0; i < numberBetweenThreeAndEight; i++) {\r\n        charIds.push(Math.floor(Math.random()*108)+1)\r\n    }\r\n\r\n    return charIds\r\n}\r\n\r\nlet getCharactersAndLocationsQuery = `\r\n    {\r\n        charactersByIds(ids: [`+setCharIds()+`]) {\r\n            id\r\n            name\r\n            image\r\n        }\r\n\r\n        locationsByIds(ids: [`+setLocIds()+`]) {\r\n            id\r\n            name\r\n        }\r\n    }\r\n`\r\n\r\nlet queryCharactersAndLocations = gql`${getCharactersAndLocationsQuery}`\r\n\r\nexport {queryCharactersAndLocations}","import React, {useState} from 'react'\r\nimport {graphql} from 'react-apollo';\r\n\r\n// CSS\r\nimport '../styles/Buttons.css'\r\n\r\n// Queries\r\nimport {queryCharactersAndLocations} from '../queries/queries'\r\n\r\nfunction Buttons({data}) {\r\n    function createEpisode() {\r\n        let newEpisodeNumber = localStorage.length+1;\r\n        let newEpisodeCharacters = data.charactersByIds;\r\n        let newEpisodeLocations = data.locationsByIds;\r\n        let newEpisode = {\r\n            episodeNumber: newEpisodeNumber,\r\n            characters: newEpisodeCharacters,\r\n            locations: newEpisodeLocations,\r\n        }\r\n\r\n        let episodes = {\r\n            ...newEpisode\r\n        }\r\n\r\n        localStorage.setItem('episode' +newEpisodeNumber, JSON.stringify(episodes));\r\n        window.location.reload()\r\n    }\r\n    return (\r\n        <div className='App-main-buttons'>\r\n            <button \r\n            id=\"App-main-buttons-create\"\r\n            onClick={createEpisode}>\r\n                New episode\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default graphql(queryCharactersAndLocations)(Buttons);\r\n","import React from 'react'\r\n\r\n// CSS\r\nimport '../styles/Main.css'\r\n\r\n// Components\r\nimport Screen from './Screen'\r\nimport Buttons from './Buttons'\r\n\r\nfunction Main() {\r\n    return (\r\n        <main className=\"App-main\">\r\n            <Screen />\r\n            <Buttons />\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\n\n// Fonts\nimport \"@fontsource/inknut-antiqua\"\nimport \"@fontsource/exo\"\nimport \"@fontsource/covered-by-your-grace\"\n\n// CSS\nimport './App.css'\n\n// Components\nimport Main from './components/Main'\n\n// Apollo client setup\nconst client = new ApolloClient({\n  uri: \"https://rickandmortyapi.com/graphql\"\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"App\">\n        <Main />\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\ndocument.getElementById('root'));"],"sourceRoot":""}